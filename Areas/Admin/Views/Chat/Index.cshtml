@{
    ViewData["Title"] = "Chat Support";
}
<link rel = "stylesheet" href = "https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"/>
<link rel = "stylesheet" href = "/css/Admin/ChatAdmin.css"/>

<div class = "container-fluid">
    <div class = "row" style = "height:80vh;">
        <!-- Rooms list -->
        <div class = "col-4 border-end d-flex flex-column">
            <div class = "p-3 border-bottom bg-white"><h5>Danh sách khách hàng</h5></div>
            <div style = "flex:1; overflow-y:auto;">
                <ul id = "roomsList" class = "list-group list-group-flush"></ul>
            </div>
        </div>

        <!-- Chat box -->
        <div class = "col-8 d-flex flex-column" style = "background: #b1d4f3;">
            <div id = "chatHeader" class = "p-2 border-bottom"><strong id = "currentRoomTitle">Chọn khách để bắt đầu
                    chat</strong></div>
            <div id = "messagesContainer" style = "flex:1; overflow:auto; padding:10px;"></div>
            <div class = "p-2 border-top">
                <div class = "input-group">
                    <input type = "text" id = "replyMessage" class = "form-control" placeholder = "Nhập tin nhắn..."/>
                    <button id = "btnSend" class = "btn btn-primary">Gửi</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script src = "https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src = "https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    const hubUrl = "/chathub";
    const adminId = "admin";
    let connection;
    let currentRoomId = null;

    // Start SignalR connection
    async function startConnection() {
        connection = new signalR.HubConnectionBuilder()
            .withUrl(hubUrl + "?roomId=" + encodeURIComponent(adminId))
            .withAutomaticReconnect()
            .build();

        connection.on("ReceiveMessage", payload => {
            const {roomId, senderId, senderName, message, sentAt} = payload;
            let li = $(`#room-${roomId}`);

            if (li.length === 0) {
                // Room mới → tự thêm + highlight
                li = $(/* ... */);
                li.click(() => openRoom(roomId, senderName));
                $("#roomsList").prepend(li); // room mới → prepend
            } else {
                // Room cũ → cập nhật last message
                li.find(".small.text-muted").text(message);
                li.find("small.text-muted").text(
                    new Date(new Date(sentAt).getTime() + 7 * 60 * 60 * 1000)
                        .toLocaleString("vi-VN", {
                            hour: "2-digit",
                            minute: "2-digit",
                            day: "2-digit",
                            month: "2-digit",
                            year: "numeric",
                            hour12: false
                        })
                );

                if (roomId !== currentRoomId) {
                    li.addClass("list-group-item-warning"); // highlight
                }

                // **Điều quan trọng: đưa lên đầu**
                li.prependTo("#roomsList"); // hoặc $("#roomsList").prepend(li);
            }


            // Append message vào chat box nếu đang mở
            if (roomId === currentRoomId) {
                appendMessage(roomId, senderId, senderName, message, sentAt);
            }
        });

        await connection.start();
        console.log("Connected to ChatHub as admin");
    }

    // Append message
    function appendMessage(roomId, senderId, senderName, message, sentAt) {
        const container = $("#messagesContainer");
        const isAdmin = senderId === adminId;
        const date = new Date(sentAt);
        const timeStr = new Date(date.getTime() + 7 * 60 * 60 * 1000)
            .toLocaleString("vi-VN", {
                hour: "2-digit",
                minute: "2-digit",
                day: "2-digit",
                month: "2-digit",
                year: "numeric",
                hour12: false
            });

        const msgHtml = `
        <div class="mb-2 d-flex ${isAdmin ? 'justify-content-end' : ''}">
            <div style="max-width:70%;">
                <div class="small text-muted">${senderName ?? senderId} • ${timeStr}</div>
                <div class="p-2 ${isAdmin ? 'bg-primary text-white rounded' : 'bg-light rounded'}">${escapeHtml(message)}</div>
            </div>
        </div>`;
        container.append(msgHtml);
        container.scrollTop(container[0].scrollHeight);
    }

    function escapeHtml(unsafe) {
        return unsafe.replaceAll("&", "&amp;").replaceAll("<", "&lt;")
            .replaceAll(">", "&gt;").replaceAll('"', "&quot;")
            .replaceAll("'", "&#039;");
    }

    // Load rooms
    async function loadRooms() {
        const res = await fetch('@Url.Action("Rooms", "Chat", new { area = "Admin" })');
        const rooms = await res.json();
        const ul = $("#roomsList").empty();

        if (rooms.length === 0) {
            ul.append('<li class="list-group-item">Chưa có cuộc chat</li>');
            return;
        }

        rooms.forEach(r => {
            const li = $(`
    <li id="room-${r.roomId}" class="list-group-item d-flex justify-content-between align-items-start" style="cursor:pointer;" data-username="${r.userName}">
        <div>
            <div class="fw-bold">${r.userName}</div>
            <div class="small text-muted">${r.lastMessage ?? ''}</div>
        </div>
        <div>
            <small class="text-muted">${new Date(new Date(r.lastAt).getTime() + 7 * 60 * 60 * 1000)
                .toLocaleString("vi-VN", {
                    hour: "2-digit",
                    minute: "2-digit",
                    day: "2-digit",
                    month: "2-digit",
                    year: "numeric",
                    hour12: false
                })}</small>
            <button class="btn btn-sm btn-danger ms-2 btnDeleteRoom">Xóa</button>
        </div>
    </li>`);

            li.click(e => {
                if (!$(e.target).hasClass("btnDeleteRoom")) openRoom(r.roomId, r.userName);
            });

            // Xử lý click xóa
            li.find(".btnDeleteRoom").click(async e => {
                e.stopPropagation(); // ngăn click mở room
                if (!confirm(`Bạn có chắc muốn xóa toàn bộ chat với ${r.userName}?`)) return;

                const res = await fetch(`/Admin/Chat/DeleteRoom?roomId=${encodeURIComponent(r.roomId)}`, {method: 'DELETE'});
                if (res.ok) {
                    li.remove();
                    if (currentRoomId === r.roomId) {
                        currentRoomId = null;
                        $("#currentRoomTitle").text("Chọn khách để bắt đầu chat");
                        $("#messagesContainer").empty();
                    }
                    alert("Đã xóa chat!");
                } else {
                    alert("Xóa thất bại.");
                }
            });

            ul.append(li);
        });

    }

    // Open room
    async function openRoom(roomId, userName) {
        currentRoomId = roomId;
        $("#currentRoomTitle").text("Chat với: " + (userName?.trim() || "Khách"));
        $("#messagesContainer").empty();

        // Remove highlight
        $(`#room-${roomId}`).removeClass("list-group-item-warning");

        await connection.invoke("JoinRoom", roomId);

        const res = await fetch('@Url.Action("Messages", "Chat", new { area = "Admin" })?roomId=' + encodeURIComponent(roomId));
        const msgs = await res.json();
        msgs.forEach(m => appendMessage(m.roomId, m.senderId, m.senderName, m.message, m.sentAt));
    }

    // Send message
    async function sendMessage() {
        const text = $("#replyMessage").val().trim();
        if (!text || !currentRoomId) return;
        await connection.invoke("SendMessageToRoom", currentRoomId, adminId, "Admin", text);
        $("#replyMessage").val("");
    }

    // Init
    $(function () {
        startConnection().catch(err => console.error(err));
        loadRooms();
        $("#btnSend").click(sendMessage);
        $("#replyMessage").keydown(e => {
            if (e.key === "Enter") sendMessage();
        });
    });
</script>
