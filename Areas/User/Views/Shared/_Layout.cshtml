@using System.Security.Claims
@{
    var userId = User?.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? Guid.NewGuid().ToString();
    var userName = User?.Identity?.Name ?? "Khách";
}

<!DOCTYPE html>
<html lang = "vi">
<head>
    <meta charset = "utf-8"/>
    <meta name = "viewport" content = "width=device-width, initial-scale=1"/>
    <title>@ViewData["Title"] - E-Tech Store</title>

    <!-- Bootstrap + FontAwesome -->
    <link href = "https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel = "stylesheet"/>
    <link href = "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel = "stylesheet"/>

    <link href = "~/css/site.css" rel = "stylesheet" asp-append-version = "true"/>
    <link href = "~/css/Boxchat.css" rel = "stylesheet" asp-append-version = "true"/>
</head>
<body>
<!-- HEADER -->
@await Html.PartialAsync("_Header")

<!-- NAVBAR -->
@await Html.PartialAsync("_Navbar")

<!-- MAIN -->
<main class = "container">
    <div class = "row">
        <!-- SIDEBAR -->
        @await Html.PartialAsync("_Notification")
        @if (ViewData["HideLayoutPart"] as bool? != true)
        {
            @await Html.PartialAsync("_Sildebar")
        }
        @if (ViewData["col-12"] as bool? != true)
        {
            <section class = "col-9">
                @RenderBody()
            </section>
        }
        else
        {
            <!-- CONTENT -->
            <section class = "col-lg-12">
                @RenderBody()
            </section>
        }
    </div>
</main>

<!-- FOOTER -->
@await Html.PartialAsync("_Footer")

<!-- CHAT BOX -->
<div id = "userChatBox">
    <div id = "userChatHeader">
        <div class = "chat-header-content">
            <div class = "chat-icon">
                <i class = "fas fa-headset"></i>
            </div>
            <div>
                <div class = "chat-title">Hỗ trợ trực tuyến</div>
                <div class = "chat-status">
                    <span class = "status-dot"></span>
                    <span>Đang hoạt động</span>
                </div>
            </div>
        </div>
        <div class = "chat-toggle">
            <i class = "fas fa-chevron-down"></i>
        </div>
    </div>

    <div id = "userChatBody">
        <div id = "userMessages"></div>
        <div class = "typing-indicator" id = "typingIndicator">
            <i class = "fas fa-user-tie"></i> Nhân viên đang soạn tin nhắn
            <div class = "typing-dots">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
        <div class = "chat-input-container">
            <div class = "chat-input-wrapper">
                <input id = "userMessageInput" placeholder = "Nhập tin nhắn của bạn..."/>
                <button id = "userSendBtn">
                    <i class = "fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<div id = "toast-container" class = "position-fixed bottom-0 end-0 p-3" style = "z-index: 1055;"></div>

<!-- Scripts -->
<script src = "https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src = "https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script src = "https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
    (function () {
        const userId = '@userId';
        const userName = '@userName';
        const hubUrl = "/chathub";

        let connection = new signalR.HubConnectionBuilder()
            .withUrl(hubUrl + "?roomId=" + encodeURIComponent(userId))
            .withAutomaticReconnect()
            .build();

        connection.on("ReceiveMessage", (payload) => {
            if (payload.roomId !== userId) return;
            renderMessage(payload.senderId, payload.senderName, payload.message, payload.sentAt);
        });

        function renderMessage(senderId, senderName, message, sentAt) {
            const isUser = senderId === userId; // nếu senderId = userId => là user
            const messageClass = isUser ? "message-bubble message-user" : "message-bubble message-admin";
            const date = new Date(sentAt);
            const vnTime = new Date(date.getTime()); // UTC +7
            const timeStr = vnTime.toLocaleString("vi-VN", {
                hour: "2-digit", minute: "2-digit", day: "2-digit", month: "2-digit", year: "numeric", hour12: false
            });

            const html = `
        <div class="${messageClass}">
            <div class="message-meta">${senderName} • ${timeStr}</div>
            <div class="message-content">${escapeHtml(message)}</div>
        </div>`;

            $("#userMessages").append(html);
            $("#userMessages").scrollTop($("#userMessages")[0].scrollHeight);
        }


        function escapeHtml(unsafe) {
            return unsafe.replaceAll("&", "&amp;")
                .replaceAll("<", "&lt;")
                .replaceAll(">", "&gt;")
                .replaceAll('"', "&quot;")
                .replaceAll("'", "&#039;");
        }

        connection.start().then(() => {
            console.log("User connected to chat hub", userId);

            // Gọi API load lịch sử
            $.get(`/api/chat/history/${encodeURIComponent(userId)}`, function (messages) {
                $("#userMessages").html(""); // clear cũ
                messages.forEach(m => {
                    renderMessage(m.senderId, m.senderName, m.message, m.sentAt);
                });
            });
        }).catch(err => console.error(err));


        // Toggle hiển thị box chat
        $(document).on("click", "#userChatHeader", function () {
            $("#userChatBody").toggle();
        });

        // Gửi tin nhắn
        $(document).on("click", "#userSendBtn", function () {
            const txt = $("#userMessageInput").val().trim();
            if (!txt) return;
            connection.invoke("JoinRoom", userId);
            connection.invoke("SendMessageToRoom", userId, userId, userName, txt);
            $("#userMessageInput").val("");
        });
    })();
</script>

<script src = "~/js/presence.js"></script>
@await RenderSectionAsync("Scripts", required: false)
@await RenderSectionAsync("FloatingButton", required: false)
</body>
</html>
