@using MyWebApp.ViewModels

<link rel = "stylesheet" href = "~/css/User/ProductFillter.css"/>
@if (Model is ProductFilterViewModel filterModel)
{
    <form id = "filterForm" class = "mb-4">
        <div class = "d-flex flex-wrap align-items-center gap-4 p-3 bg-light rounded shadow-sm">
            <!-- Danh mục -->
            <div class = "filter-item d-flex align-items-center">
                <label class = "fw-bold me-2"><i class = "fas fa-list"></i> Danh mục:</label>
                @await Component.InvokeAsync("Category", new { selectedSlugCategories = filterModel.SelectedSlugCategories })
            </div>

            <!-- Thương hiệu -->
            <div class = "filter-item d-flex align-items-center">
                <label class = "fw-bold me-2"><i class = "fas fa-tags"></i> Thương hiệu:</label>
                @await Component.InvokeAsync("Brand", new { selectedSlugBrands = filterModel.SelectedSlugBrands })
            </div>

            <!-- Giá -->
            <div class = "filter-item d-flex align-items-center">
                <label class = "fw-bold me-2"><i class = "fas fa-dollar-sign"></i> Giá:</label>
                <input
                    type = "number" id = "minPriceInput" name = "minPrice"
                    class = "form-control form-control-sm w-auto" placeholder = "Từ" value = "@filterModel.MinPrice"
                />
                <span class = "mx-1">-</span>
                <input
                    type = "number" id = "maxPriceInput" name = "maxPrice"
                    class = "form-control form-control-sm w-auto" placeholder = "Đến" value = "@filterModel.MaxPrice"
                />
            </div>

            <!-- Sắp xếp -->
            <div class = "filter-item d-flex align-items-center">
                <label class = "fw-bold me-2"><i class = "fas fa-sort"></i> Sắp xếp:</label>
                <select id = "sortOrder" name = "sortOrder" class = "form-select form-select-sm w-auto">
                    @if (filterModel.SortOrder == "desc")
                    {
                        <option value = "desc" selected>Giá giảm dần</option>
                        <option value = "asc">Giá tăng dần</option>
                        <option value = "newest">Mới nhất</option>
                        <option value = "oldest">Cũ nhất</option>
                    }
                    else if (filterModel.SortOrder == "asc")
                    {
                        <option value = "desc">Giá giảm dần</option>
                        <option value = "asc" selected>Giá tăng dần</option>
                        <option value = "newest">Mới nhất</option>
                        <option value = "oldest">Cũ nhất</option>
                    }
                    else if (filterModel.SortOrder == "newest")
                    {
                        <option value = "desc">Giá giảm dần</option>
                        <option value = "asc">Giá tăng dần</option>
                        <option value = "newest" selected>Mới nhất</option>
                        <option value = "oldest">Cũ nhất</option>
                    }
                    else
                    {
                        <option value = "desc">Giá giảm dần</option>
                        <option value = "asc">Giá tăng dần</option>
                        <option value = "newest">Mới nhất</option>
                        <option value = "oldest" selected>Cũ nhất</option>
                    }
                </select>
            </div>

            <!-- Hiển thị khoảng giá -->
            <div class = "text-muted">
                Khoảng: <span id = "priceRange">@filterModel.MinPrice - @filterModel.MaxPrice</span> ₫
            </div>
        </div>
    </form>
}

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const minInput = document.getElementById('minPriceInput');
        const maxInput = document.getElementById('maxPriceInput');
        const sortOrder = document.getElementById('sortOrder');
        const priceRange = document.getElementById('priceRange');

        function filterProducts() {
            let form = $('#filterForm');
            let url = '@Url.Action("FilterPartial", "Product", new { area = "User" })';

            $.ajax({
                url: url,
                type: 'GET',
                data: form.serialize(),
                success: function (html) {
                    $('#product-list-container').html(html);
                },
                error: function () {
                    showToast("⚠️ Lọc sản phẩm thất bại!", "danger");
                }
            });
        }

        function updatePriceRange() {
            let min = parseInt(minInput.value) || 0;
            let max = parseInt(maxInput.value) || 0;

            if (min > max) [min, max] = [min, max];
            priceRange.innerText = min.toLocaleString() + " - " + max.toLocaleString();

            filterProducts();
        }

        minInput.addEventListener('input', updatePriceRange);
        maxInput.addEventListener('input', updatePriceRange);
        sortOrder.addEventListener('change', filterProducts);
        $('#filterForm input[type="checkbox"]').on('change', filterProducts);
    });
</script>